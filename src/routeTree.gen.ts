/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as _pathlessLayoutRouteImport } from "./routes/__pathlessLayout";
import { Route as rootRouteImport } from "./routes/__root";
import { Route as AnchorRouteImport } from "./routes/anchor";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as PostsPostIdRouteImport } from "./routes/posts.$postId";
import { Route as PostsIndexRouteImport } from "./routes/posts.index";
import { Route as PostsRouteRouteImport } from "./routes/posts.route";

const AnchorRoute = AnchorRouteImport.update({
  id: "/anchor",
  path: "/anchor",
  getParentRoute: () => rootRouteImport,
} as unknown);
const _pathlessLayoutRoute = _pathlessLayoutRouteImport.update({
  id: "/__pathlessLayout",
  getParentRoute: () => rootRouteImport,
} as unknown);
const PostsRouteRoute = PostsRouteRouteImport.update({
  id: "/posts",
  path: "/posts",
  getParentRoute: () => rootRouteImport,
} as unknown);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as unknown);
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => PostsRouteRoute,
} as unknown);
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: "/$postId",
  path: "/$postId",
  getParentRoute: () => PostsRouteRoute,
} as unknown);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/posts": typeof PostsRouteRouteWithChildren;
  "/anchor": typeof AnchorRoute;
  "/posts/$postId": typeof PostsPostIdRoute;
  "/posts/": typeof PostsIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/anchor": typeof AnchorRoute;
  "/posts/$postId": typeof PostsPostIdRoute;
  "/posts": typeof PostsIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/posts": typeof PostsRouteRouteWithChildren;
  "/__pathlessLayout": typeof _pathlessLayoutRoute;
  "/anchor": typeof AnchorRoute;
  "/posts/$postId": typeof PostsPostIdRoute;
  "/posts/": typeof PostsIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/posts" | "/anchor" | "/posts/$postId" | "/posts/";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/anchor" | "/posts/$postId" | "/posts";
  id: "__root__" | "/" | "/posts" | "/__pathlessLayout" | "/anchor" | "/posts/$postId" | "/posts/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  PostsRouteRoute: typeof PostsRouteRouteWithChildren;
  _pathlessLayoutRoute: typeof _pathlessLayoutRoute;
  AnchorRoute: typeof AnchorRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/anchor": {
      id: "/anchor";
      path: "/anchor";
      fullPath: "/anchor";
      preLoaderRoute: typeof AnchorRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/__pathlessLayout": {
      id: "/__pathlessLayout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof _pathlessLayoutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/posts": {
      id: "/posts";
      path: "/posts";
      fullPath: "/posts";
      preLoaderRoute: typeof PostsRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/posts/": {
      id: "/posts/";
      path: "/";
      fullPath: "/posts/";
      preLoaderRoute: typeof PostsIndexRouteImport;
      parentRoute: typeof PostsRouteRoute;
    };
    "/posts/$postId": {
      id: "/posts/$postId";
      path: "/$postId";
      fullPath: "/posts/$postId";
      preLoaderRoute: typeof PostsPostIdRouteImport;
      parentRoute: typeof PostsRouteRoute;
    };
  }
}

interface PostsRouteRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute;
  PostsIndexRoute: typeof PostsIndexRoute;
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
};

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(PostsRouteRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  _pathlessLayoutRoute: _pathlessLayoutRoute,
  AnchorRoute: AnchorRoute,
};
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();
